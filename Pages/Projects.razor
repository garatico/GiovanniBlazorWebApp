@* DEFINES PAGE ROUTING*@
@* DEFINES A CLASS OBJECT HTTP for REQUESTS / RESPONSES *@

@page "/Projects"
@using System.Net.Http.Headers;
@inject HttpClient Http

<PageTitle>Giovanni Aratico | Projects</PageTitle>
<!--
  {
    "projectTitle": "Metacritic Webscraper",
    "projectDescription": "Demonstrates basic programming skills in Python. Utilizes the libraries Requests, NumPy and BeautifulSoup to collect data and output to usable formats.",
    "projectLink": "https://github.com/garatico/Metacritic-Scraper",
    "projectImg": "../img/meta.png",
    "projectImgAlt": "Metacritic",
    "projectImgId": "metapic"
  },
  {
    "projectTitle": "Personal Website",
    "projectDescription": "Demonstrates basic web development skills including HTML, CSS and JavaScript in a static web app. Utilizes Bootstrap styling and demonstrates knowledge of git version control",
    "projectLink": "https://github.com/garatico/garatico.github.io",
    "projectImg": "../img/face.jpg",
    "projectImgAlt": "Giovanni",
    "projectImgId": "facepic"
  }
-->

<!-- Contains content of the page -->
<div class="content">
    <div class="info" id="info_projects">
        <h2> Portfolio Projects linked through GitHub: </h2>
    </div>
    <div id="projects_list">
        @foreach (var project in myProjects)
        {
            <GiovanniBlazorWebAppE.Shared.ElementDisplays.ProjectDisplay myProject="project" />
        }
    </div>
</div>

@code {
    // Initializes new empty projects list with get/set
    public List<Models.Project> myProjects { get; set; } = new();

    // protected = Accessible only through derived (sub-class)
    // override = Used to extend or modify the behavior of a 
    // async = Defines start of an asynchronous function
    // Task = Operation performed in an asynchronous manner
    // OnInitializedAsync() = Invoked when component is ready to start
    /// <summary>
    /// protected override async Task OnInitializedAsync()
    ///  //{
    ///   //myProjects = await Http.GetFromJsonAsync<List<Models.Project>>("../data/Projects.json") ?? new ();
    ///    ////Console.WriteLine(myProjects[0].projectTitle);
    ///     ////Console.WriteLine(myProjects[1].projectTitle);
    ///      //}
    /// </summary>
    /// <returns></returns>
    
    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "../data/Projects.json");
        request.Headers.CacheControl = new CacheControlHeaderValue { NoCache = true };

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            myProjects = await response.Content.ReadFromJsonAsync<List<Models.Project>>()!;
        }
        else
        {
            myProjects = new List<Models.Project>();
        }
    }

}



